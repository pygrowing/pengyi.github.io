<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[java基础-运算符]]></title>
      <url>http://yoursite.com/2017/02/16/java%E5%9F%BA%E7%A1%80_%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在java中运算符分为：算数运算符、关系运算符、逻辑运算符、位运算符。本次将主要学习前四种和理解一些其他运算符。</p>
</blockquote>
<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><pre><code>算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。
</code></pre><table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:left">加法 - 相加运算符两侧的值</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:left">减法 - 左操作数减去右操作数</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:left">乘法 - 相乘操作符两侧的值</td>
</tr>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:left">除法 - 左操作数除以右操作数</td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:left">取模 - 左操作数除右操作数的余数</td>
</tr>
<tr>
<td style="text-align:center">++</td>
<td style="text-align:left">自增 - 操作数的值增加1</td>
</tr>
<tr>
<td style="text-align:center">–</td>
<td style="text-align:left">自减 - 操作数的值减少1</td>
</tr>
</tbody>
</table>
<ul>
<li>注意：前缀自增或自减(++i ,–i)：先进行自增或者自减运算，再进行表达式运算。（意思是当时就加）。<br>后缀自增或自减(i++,i–):先进行表达式运算，再进行自增或者自减运算.(意思是第二次使用到它再加)。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selfAddMinus</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;<span class="comment">//定义一个变量；</span></div><div class="line">        <span class="keyword">int</span> b = <span class="number">5</span>;</div><div class="line">        <span class="keyword">int</span> x = <span class="number">2</span>*++a;</div><div class="line">        <span class="keyword">int</span> y = <span class="number">2</span>*b++;</div><div class="line">        System.out.println(<span class="string">"自增运算符前缀运算后a="</span>+a+<span class="string">",x="</span>+x);</div><div class="line">        System.out.println(<span class="string">"自增运算符后缀运算后b="</span>+b+<span class="string">",y="</span>+y);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>运行结果：<br>自增运算符前缀运算后a=6，x=12<br>自增运算符后缀运算后b=6，y=10</p>
</blockquote>
<a id="more"></a>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">==</td>
<td style="text-align:left">检查如果两个操作数的值是否相等，如果相等则条件为真。</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:left">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>
</tr>
</tbody>
</table>
<h2 id="逻辑运算符（与或非）"><a href="#逻辑运算符（与或非）" class="headerlink" title="逻辑运算符（与或非）"></a>逻辑运算符（与或非）</h2><table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&#38;  &#38;</td>
<td style="text-align:left">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>
</tr>
<tr>
<td style="text-align:center">&#124; &#124;</td>
<td style="text-align:left">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td>
</tr>
<tr>
<td style="text-align:center">！</td>
<td style="text-align:left">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td>
</tr>
</tbody>
</table>
<p> 注：短路逻辑运算符：当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuoJi</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;<span class="comment">//定义一个变量；</span></div><div class="line">        <span class="keyword">boolean</span> b = (a&lt;<span class="number">4</span>)&amp;&amp;(a++&lt;<span class="number">10</span>);</div><div class="line">        System.out.println(<span class="string">"使用短路逻辑运算符的结果为"</span>+b);</div><div class="line">        System.out.println(<span class="string">"a的结果为"</span>+a);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>运行结果：<br>使用短路逻辑运算符的结果为false<br>a的结果为5</p>
</blockquote>
<p> 解析： 该程序使用到了短路逻辑运算符(&amp;&amp;)，首先判断 a&lt;4 的结果为 false，则 b 的结果必定是 false，所以不再执行第二个操作 a++&lt;10 的判断，所以 a 的值为 5。</p>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p> Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。位运算符作用在所有的位上，并且按位运算。位运算是以二进制位为单位进行的运算，其操作数和运算结果都是整型值。 位与’&amp;’，位或’|’，位非’~’，位异或’^’，右移’&gt;&gt;’，左移’&lt;&lt;’，0填充的右移’&gt;&gt;&gt;’</p>
<table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&#38;</td>
<td style="text-align:left">如果相对应位都是1，则结果为1，否则为0</td>
</tr>
<tr>
<td style="text-align:center">&#124;</td>
<td style="text-align:left">如果相对应位都是0，则结果为0，否则为1</td>
</tr>
<tr>
<td style="text-align:center">&#94;</td>
<td style="text-align:left">如果相对应位值相同，则结果为0，否则为1</td>
</tr>
<tr>
<td style="text-align:center">~</td>
<td style="text-align:left">按位补运算符翻转操作数的每一位，即0变成1，1变成0。</td>
</tr>
<tr>
<td style="text-align:center">&lt;&lt;</td>
<td style="text-align:left">按位左移运算符。左操作数按位左移右操作数指定的位数。</td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;</td>
<td style="text-align:left">按位右移运算符。左操作数按位右移右操作数指定的位数。</td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;&gt;</td>
<td style="text-align:left">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">     <span class="keyword">int</span> a = <span class="number">60</span>; <span class="comment">/* 60 = 0011 1100 */</span></div><div class="line">     <span class="keyword">int</span> b = <span class="number">13</span>; <span class="comment">/* 13 = 0000 1101 */</span></div><div class="line">     <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">     c = a &amp; b;       <span class="comment">/* 12 = 0000 1100 */</span></div><div class="line">     System.out.println(<span class="string">"a &amp; b = "</span> + c );</div><div class="line"></div><div class="line">     c = a | b;       <span class="comment">/* 61 = 0011 1101 */</span></div><div class="line">     System.out.println(<span class="string">"a | b = "</span> + c );</div><div class="line"></div><div class="line">     c = a ^ b;       <span class="comment">/* 49 = 0011 0001 */</span></div><div class="line">     System.out.println(<span class="string">"a ^ b = "</span> + c );</div><div class="line"></div><div class="line">     c = ~a;          <span class="comment">/*-61 = 1100 0011 */</span></div><div class="line">     System.out.println(<span class="string">"~a = "</span> + c );</div><div class="line"></div><div class="line">     c = a &lt;&lt; <span class="number">2</span>;     <span class="comment">/* 240 = 1111 0000 */</span></div><div class="line">     System.out.println(<span class="string">"a &lt;&lt; 2 = "</span> + c );</div><div class="line"></div><div class="line">     c = a &gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 1111 */</span></div><div class="line">     System.out.println(<span class="string">"a &gt;&gt; 2  = "</span> + c );</div><div class="line"></div><div class="line">     c = a &gt;&gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 0000 1111 */</span></div><div class="line">     System.out.println(<span class="string">"a &gt;&gt;&gt; 2 = "</span> + c );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>a &amp; b = 12<br>a | b = 61<br>a ^ b = 49<br>~a = -61<br>a &lt;&lt; 2 = 240<br>a &gt;&gt; 15<br>a &gt;&gt;&gt; 15</p>
</blockquote>
<h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p> 可以与二元运算符、逻辑运算符和位运算符组成简洁运算符，从而简化一些常用表达式书写。</p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">用法</th>
<th style="text-align:center">等价于</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">+=</td>
<td style="text-align:center">s+=i</td>
<td style="text-align:center">s=s+i</td>
<td style="text-align:left">s,i为数值型</td>
</tr>
<tr>
<td style="text-align:center">-=</td>
<td style="text-align:center">s-=i</td>
<td style="text-align:center">s=s-i</td>
<td style="text-align:left">s,i为数值型</td>
</tr>
<tr>
<td style="text-align:center">*=</td>
<td style="text-align:center">s*=i</td>
<td style="text-align:center">s=s*i</td>
<td style="text-align:left">s,i为数值型</td>
</tr>
<tr>
<td style="text-align:center">/=</td>
<td style="text-align:center">s/=i</td>
<td style="text-align:center">s=s/i</td>
<td style="text-align:left">s,i为数值型</td>
</tr>
<tr>
<td style="text-align:center">%=</td>
<td style="text-align:center">s%=i</td>
<td style="text-align:center">s=s%i</td>
<td style="text-align:left">s,i为数值型</td>
</tr>
<tr>
<td style="text-align:center">&#38;=</td>
<td style="text-align:center">a&#38;=b</td>
<td style="text-align:center">a=a&#38;b</td>
<td style="text-align:left">a、b是逻辑型或整形</td>
</tr>
<tr>
<td style="text-align:center">&#124;=</td>
<td style="text-align:center">a&#124;=b</td>
<td style="text-align:center">a=a&#124;b</td>
<td style="text-align:left">a、b是逻辑型或整形</td>
</tr>
<tr>
<td style="text-align:center">&#94;=</td>
<td style="text-align:center">a&#94;=b</td>
<td style="text-align:center">a=a&#94;b</td>
<td style="text-align:left">a、b是逻辑型或整形</td>
</tr>
<tr>
<td style="text-align:center">&lt;&lt;=</td>
<td style="text-align:center">s&lt;&lt;=i</td>
<td style="text-align:center">s=s&lt;&lt;i</td>
<td style="text-align:left">s、i是整形</td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;=</td>
<td style="text-align:center">s&gt;&gt;=i</td>
<td style="text-align:center">s=s&gt;&gt;i</td>
<td style="text-align:left">s、i是整形</td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;&gt;=</td>
<td style="text-align:center">s&gt;&gt;&gt;=i</td>
<td style="text-align:center">s=s&gt;&gt;&gt;i</td>
<td style="text-align:left">s、i是整形</td>
</tr>
</tbody>
</table>
<h3 id="方括号-和圆括号"><a href="#方括号-和圆括号" class="headerlink" title="方括号[] 和圆括号 ()"></a>方括号[] 和圆括号 ()</h3><p> 方括号[]是数组运算符，方括号[]中的数值是数组的下标，整个表达式就代表数组中该下标所在位置的元素值<br> 圆括号（）是运算符用于改变表达式中运算符的优先级。</p>
<h3 id="条件运算符-三目运算符"><a href="#条件运算符-三目运算符" class="headerlink" title="条件运算符(三目运算符)"></a>条件运算符(三目运算符)</h3><p> &lt;表达式1&gt; ？&lt;表达式2&gt;:&lt;表达式3&gt;<br> 先计算表达式1的值，<br> 当表达式1的值为true时，则将&lt;表达式2&gt;的值作为整个表达式的值。<br> 当表达式1的值为false时，则讲&lt;表达式3&gt;的值作为整个表达式的值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">40</span>,b = <span class="number">30</span>,num;</div><div class="line">num = a &gt; b ? a : b;</div><div class="line">System.out.println(num);</div></pre></td></tr></table></figure>
<blockquote>
<p>输出为： 40</p>
</blockquote>
<h3 id="对象运算符"><a href="#对象运算符" class="headerlink" title="对象运算符"></a>对象运算符</h3><p> 对象运算符instanceof用来测试一个指定对象是否是指定类（或它的子类）的实例，若是则返回true，否则返回false。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String s = <span class="keyword">new</span> String(<span class="string">"sa"</span>);  </div><div class="line"><span class="keyword">if</span>(s <span class="keyword">instanceof</span> Object)&#123;  </div><div class="line">    System.out.println(<span class="string">"String is object class"</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>输出为：String is object class</p>
</blockquote>
<h3 id="点运算符"><a href="#点运算符" class="headerlink" title="点运算符"></a>点运算符</h3><p> 点运算符“ . ” 的功能有两个：一是引用类中成员，二是指示包的层次等级。</p>
<h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><table><br><tr><th>优先级</th><th>符号</th><th>结合性(与操作数)</th><th>目数</th></tr><br><tr><td rowspan="3">1</td><td>.</td><td>从左到右</td><td>双目</td></tr><br><tr><td>( )</td><td>从左到右</td><td> </td></tr><br><tr><td>[ ]</td><td>从左到右</td><td></td></tr><br><tr><td rowspan="6">2</td><td>+(正)</td><td>从右到左</td><td>单目</td></tr><br><tr><td>-(负)</td><td>从右到左</td><td>单目</td></tr><br><tr><td>++</td><td>从右到左</td><td>单目</td></tr><br><tr><td>–</td><td>从右到左</td><td>单目</td> </tr><br><tr><td>~(按位符/取补运算)</td><td>从右到左</td><td>单目</td></tr><br><tr><td>！(逻辑非)</td><td>从右到左</td><td>单目</td></tr><br><tr><td rowspan="3">3</td><td><em> (乘)</em></td><td>从左到右</td><td>双目</td></tr><br><tr><td>/ (除)</td><td>从左到右</td><td>双目</td></tr><br><tr><td>% (取余)</td><td>从左到右</td><td>双目</td></tr><br><tr><td rowspan="2">4</td><td>+(加)</td><td>从左到右</td><td>双目</td></tr><br><tr><td>- (减)</td><td>从左到右</td><td>双目</td></tr><br><tr><td rowspan="3">5</td><td>&lt;&lt;</td><td>从左到右</td><td>双目</td></tr><br><tr><td>&gt;&gt;</td><td>从左到右</td><td>双目</td></tr><br><tr><td>&gt;&gt;&gt;</td><td>从左到右</td><td>双目</td></tr><br><tr><td rowspan="5">6</td><td>&lt;</td><td>从左到右</td><td>双目</td></tr><br><tr><td>&lt;=</td><td>从左到右</td><td>双目</td></tr><br><tr><td>&gt;</td><td>从左到右</td><td>双目</td></tr><br><tr><td>&gt;=</td><td>从左到右</td><td>双目</td></tr><br><tr><td>instanceof </td><td>从左到右</td><td>双目</td></tr><br><tr><td rowspan="2">7</td><td>=</td><td>从左到右</td><td>双目</td></tr><br><tr><td>!=</td><td>从左到右</td><td>双目</td></tr><br><tr><td>8</td><td>&#38;  (按位与)</td><td>从左到右</td><td>双目</td></tr><br><tr><td>9</td><td>&#124;  (按位或)</td><td>从左到右</td><td>双目</td></tr><br><tr><td>10</td><td>&#94; (按位异或)</td><td>从左到右</td><td>双目</td></tr><br><tr><td>11</td><td>&#38;&#38;  (短路与)</td><td>从左到右</td><td>双目</td></tr><br><tr><td>12</td><td>&#124;&#124; (短路或)</td><td>从左到右</td><td>双目</td></tr><br><tr><td>13</td><td>?: (条件运算符)</td><td>从左到右</td><td>三目</td></tr><br><tr><td>14</td><td>=   +=   -=    =   /=   %=   &#38;=   &#124;=   &#94;=   &lt;&lt;=   &gt;&gt;=   &gt;&gt;&gt;=</td><td>从左到右</td><td>双目</td></tr><br></table>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web开发中的浏览器兼容性问题]]></title>
      <url>http://yoursite.com/2017/01/23/web%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在web开发中常常会遇到浏览器在兼容方面的问题，不同的浏览器最终呈现的结果可能会造成页面显示效果不统一的情况，HTML5的出现对兼容性问题做出了相应的努力，在HTML5中一旦浏览器不支持HTML5的某项功能，针对该功能的备选行为就会悄悄运行。但还有一些兼容性的问题并没有得到有效的解决，所以浏览器的兼容性问题是前端开发人员经常会碰到和必须要解决的问题。</p>
</blockquote>
<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1489026381&di=79e83b6d7414a9a23fefa05edea99ca4&imgtype=jpg&er=1&src=http%3A%2F%2Fimg.zcool.cn%2Fcommunity%2F01eed95545149e0000019ae9d0af9b.jpg" class="full-image"></p>
<h2 id="浏览器兼容问题"><a href="#浏览器兼容问题" class="headerlink" title="浏览器兼容问题"></a>浏览器兼容问题</h2><h3 id="不同的浏览器margin-和padding的最终呈现会有差异问题："><a href="#不同的浏览器margin-和padding的最终呈现会有差异问题：" class="headerlink" title="不同的浏览器margin 和padding的最终呈现会有差异问题："></a>不同的浏览器margin 和padding的最终呈现会有差异问题：</h3><p>在CSS中加入 <em> {margin:0;padding:0;}<br>即用通配符</em>来设置各个标签的内外补丁是0。</p>
<h3 id="DIV居中问题："><a href="#DIV居中问题：" class="headerlink" title="DIV居中问题："></a>DIV居中问题：</h3><p>在IE中DIV是默认居中，而火狐浏览器默认为左对齐，可尝试增加 {margin: 0 auto;}</p>
<h3 id="float布局-块属性标签float后，又有横行的margin情况下，显示margin比设置的大："><a href="#float布局-块属性标签float后，又有横行的margin情况下，显示margin比设置的大：" class="headerlink" title="float布局 块属性标签float后，又有横行的margin情况下，显示margin比设置的大："></a>float布局 块属性标签float后，又有横行的margin情况下，显示margin比设置的大：</h3><p>在float的标签样式控制中加入{display:inline;}此元素会被显示为内联元素,其转化为行内属性，元素前后没有换行符。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#divfloat&#123;</div><div class="line">float:left;</div><div class="line">margin:5px;  /*IE下理解为10px*/</div><div class="line">display:inline;  /*IE下再理解为5px*/</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="图片默认有间距："><a href="#图片默认有间距：" class="headerlink" title="图片默认有间距："></a>图片默认有间距：</h3><p>几个img标签放在一起的时候，有些浏览器会有默认的间距，就连通配符也不起作用。<br>这里最好<code>使用float属性为img布局</code>，元素使用了float属性后，可以使该元素脱离标准流本身，浮动在其他元素之上，使其不再占用原本属于该元素的空间，这样会导致后面的元素上移并占用原本属于该元素的空间。</p>
<h3 id="padding问题："><a href="#padding问题：" class="headerlink" title="padding问题："></a>padding问题：</h3><p>FF设置 padding 后，div会增加 height 和 width，但IE不会 （* 标准的 XHTML1.0 定义 dtd 好像一致了）高度控制恰当，或尝试使用 height:100%;宽度减少使用 padding但根据实际经验，一般FF和IE的 padding 不会有太大区别，div 的实际宽 = width + padding ，所以div写全 width 和 padding，width 用实际想要的宽减去 padding 定义。</p>
<h3 id="padding，marign，height，width的解决技巧"><a href="#padding，marign，height，width的解决技巧" class="headerlink" title="padding，marign，height，width的解决技巧"></a>padding，marign，height，width的解决技巧</h3><p>注意是技巧，不是方法：<br>写好标准头<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd”&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">”http://www.w3.org/1999/xhtml”</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>高尽量用padding，慎用margin，height尽量补上100%，父级height有定值子级height不用100%，子级全为浮动时底部补个空clear:both的div宽尽量用margin，慎用padding，width算准实际要的减去padding</p>
<h3 id="IE与宽度和高度的问题"><a href="#IE与宽度和高度的问题" class="headerlink" title="IE与宽度和高度的问题"></a>IE与宽度和高度的问题</h3><p>min- 顾名思义就是最小宽度，在新版的浏览器内可用，在ie浏览器不能用数值表示。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:100%; height:50px; background:#2ec3e7; min-width:800px;min-height: 38px;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这个div是全屏的,浏览器不会产生滚动条，但是你把浏览器宽度缩小到800像素的时候，这个div不会再缩小，而浏览器就会产生滚动条。<br>但是在IE中这样使用就有问题了，如果只用宽度和高度，正常的浏览器里这两个值就不会变，如果只用min-width和min-height的话，IE下面根本等于没有设置宽度和高度。要解决这个问题，可以这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#box&#123; width: 100%; height: 50px;&#125;</div><div class="line">html&gt;body #box&#123;</div><div class="line">width: auto;</div><div class="line">height: auto;</div><div class="line">min-width: 80px;</div><div class="line">min-height: 38px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或者：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#container&#123;</div><div class="line">min-width: 600px;</div><div class="line">width:expression(document.body.clientWidth <span class="tag">&lt; <span class="attr">600</span>? "<span class="attr">600px</span>"<span class="attr">:</span> "<span class="attr">auto</span>" );</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第一个min-width是正常的；但第2行的width使用了Javascript，这只有IE才认得，它实际上通过Javascript的判断来实现最小宽度。但是这也会让你的HTML文档不太正规。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[修改hosts来无限制上网]]></title>
      <url>http://yoursite.com/2017/01/12/hosts/</url>
      <content type="html"><![CDATA[<blockquote>
<p>对于偶尔想看看墙外的风景的网友们是没必要去买一个VPN的（看视频例外），像博主偶尔看看Facebook，用用google的其实最简单的方法就是修改Hosts了，即节约成本，同时速度也还行，具体怎么做其实很简单。</p>
</blockquote>
<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b10000_10000&sec=1488375771&di=170911936cdf7aa6dcc87c272db5423a&src=http://s.qdcdn.com/cl/10940096,800,450.jpg" class="full-image"></p>
<h2 id="hosts"><a href="#hosts" class="headerlink" title="hosts?"></a>hosts?</h2><p>Hosts 文件本来是用来提高解析效率。在进行DNS请求以前，系统会先检查自己的Hosts文件中是否有这个地址映射关系，如果有则调用这个IP地址映射，如果没有再向已知的DNS服务器提出域名解析。也就是说Hosts的请求级别比DNS高。当你的Hosts文件里面有对应的IP时，它就会直接访问那个IP，而不用通过DNS。所以，当我们直接将Google、Twitter、Facebook之类的IP放入Hosts文件后，就可以跳过DNS的解析这一步，直接就行 IP 访问，不受 GFW 的 DNS 污染干扰了。<br>通俗易懂的说修改host后就能访问Google、Gmail、Facebook等被墙网站。</p>
<a id="more"></a>
<h3 id="1-找到hosts"><a href="#1-找到hosts" class="headerlink" title="1.找到hosts"></a>1.找到hosts</h3><p>不同的系统hosts的位置也是不同的:<br>Windows 系统hosts位于 <code>C:\Windows\System32\drivers\etc\hosts</code><br>Android（安卓）系统hosts位于 <code>/etc/hosts</code><br>Mac（苹果电脑）系统hosts位于 <code>/etc/hosts</code><br>iPhone（iOS）系统hosts位于 <code>/etc/hosts</code><br>Linux系统hosts位于 <code>/etc/hosts</code></p>
<h3 id="2-修改hosts权限"><a href="#2-修改hosts权限" class="headerlink" title="2.修改hosts权限"></a>2.修改hosts权限</h3><p>hosts的打开一般是需要提供权限才可以打开的，其实非常简单右键—&gt;属性—&gt;高级—&gt;在所有者中加入你的pc用户名。<a href="http://jingyan.baidu.com/article/8ebacdf0cf184b49f65cd50b.html" target="_blank" rel="external">图文教程</a><br>如果硬是不会的话还有一个简单的方法直接在桌面复制一个hosts文件，在桌面修改后直接拖入原hosts的文件夹中覆盖就行了。</p>
<h3 id="3-修改hosts文件内容"><a href="#3-修改hosts文件内容" class="headerlink" title="3.修改hosts文件内容"></a>3.修改hosts文件内容</h3><p>内容的修改无非是复制粘贴，真正修改Hosts麻烦的是hosts会不断是需要更新（你懂的），所以需要一个长久的hosts稳定更新的网站，你可以在百度搜索hosts更新，我也可以推荐一个好的网站，隔段时间会定期更新 <a href="https://laod.cn/hosts/2017-google-hosts.html" target="_blank" rel="external">老D</a></p>
<h3 id="完成以上步骤修改hosts的全部过程就完成了！"><a href="#完成以上步骤修改hosts的全部过程就完成了！" class="headerlink" title="完成以上步骤修改hosts的全部过程就完成了！"></a>完成以上步骤修改hosts的全部过程就完成了！</h3>]]></content>
      
        <categories>
            
            <category> 网络 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 娱乐 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Growing...]]></title>
      <url>http://yoursite.com/2016/12/28/Growing/</url>
      <content type="html"><![CDATA[<blockquote>
<p>不忘初心，过一段无悔的人生。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2954684-2857502ee80db9ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="full-image"></p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 记录 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
